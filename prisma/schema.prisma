// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(cuid())
  f_name                 String
  l_name                 String
  gender                 String
  email                  String?            @unique
  phone_number           String             @unique
  national_id            String?            @unique
  password               String
  role                   String             @default("Unassigned")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  BioData                BioData[]
  Appointments           Appointments[]
  Incidents              Incidents[]
  Reporter               Incidents[]        @relation("reporter")
  FollowUpRequests       FollowUpRequests[]
  FollowUpRequestsMother FollowUpRequests[] @relation("mother")
  facilityAdmin          String?
  CHVTargets             CHVTargets[]
  Facility               Facility?          @relation(fields: [facilityId], references: [id])
  facilityId             String?
  BiodatumCreated        BioData[]          @relation("createdBy")
  BioDatumUpdated        BioData[]          @relation("updatedBy")
  Schedule               Schedule[]         @relation("mother")
  CreatedBy              Schedule[]         @relation("createdBy")
  UpdateBy               Schedule[]         @relation("updatedBy")
  FollowUp               FollowUp[]
  ClinicVisit            ClinicVisit[]
}

model BioData {
  id                     String   @id @default(cuid())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String   @unique
  height                 Float
  weight                 Float
  active                 Boolean  @default(true)
  age                    Float
  last_monthly_period    DateTime
  expected_delivery_date DateTime
  pregnancy_period       Float // pregnancy period in weeks
  last_clinic_visit      DateTime
  facility               Facility @relation(fields: [facilityId], references: [id])
  facilityId             String
  previous_pregnancies   Float    @default(0)
  createdBy              User     @relation(fields: [createdById], references: [id], "createdBy")
  createdById            String
  updatedBy              User     @relation(fields: [updatedById], references: [id], "updatedBy")
  updatedById            String
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

//TODO Ask for details to be captured in registering a facility
model Facility {
  id                  String                @id @default(cuid())
  name                String                @unique
  BioData             BioData[]
  Appointments        Appointments[]
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  status              String                @default("Active")
  FollowUpRequests    FollowUpRequests[]
  LocationCoordinates LocationCoordinates[]
  users               User[]
  Schedule            Schedule[]
  ClinicVisit         ClinicVisit[]
}

model Appointments {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  facility    Facility @relation(fields: [facilityId], references: [id])
  facilityId  String
  date        DateTime
  status      String
  purpose     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Incidents {
  id                String   @id @default(cuid())
  reportedBy        User     @relation(fields: [reportedById], references: [id], "reporter")
  reportedById      String
  mother_affected   User     @relation(fields: [motherId], references: [id])
  motherId          String
  description       String
  incident_time     DateTime
  incident_duration String //TODO ask for clarification on incident times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FollowUpRequests {
  id          String   @id @default(cuid())
  facility    Facility @relation(fields: [facilityId], references: [id])
  facilityId  String
  user        User     @relation(fields: [chvId], references: [id])
  chvId       String // This is the CHV user
  mother      User     @relation(fields: [userId], references: [id], "mother")
  userId      String
  status      String   @default("Pending")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resources {
  id          String   @id @default(cuid())
  title       String
  description String
  files       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CHVTargets {
  id        String   @id @default(cuid())
  chv       User     @relation(fields: [userId], references: [id])
  setTarget Int      @default(0) //Number of mothers to register
  current   Int      @default(0) //Mothers currently registered
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
}

model LocationCoordinates {
  id         String   @id @default(cuid())
  lat        Float
  lng        Float
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  facilityId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ResetCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([email, code])
}

model Schedule {
  id          String     @id @default(cuid())
  title       String
  description String
  facility    Facility   @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  facilityId  String
  date        DateTime
  status      String     @default("Scheduled")
  mother      User       @relation(fields: [motherId], references: [id], "mother")
  motherId    String
  createdBy   User       @relation(fields: [createdById], references: [id], "createdBy")
  createdById String
  updatedBy   User       @relation(fields: [updatedById], references: [id], "updatedBy")
  updatedById String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  FollowUp    FollowUp[]

  @@unique([motherId, date])
}

model FollowUp {
  id         String   @id @default(cuid())
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
  scheduleId String   @unique
  chv        User     @relation(fields: [chvId], references: [id])
  chvId      String
  status     String   @default("Sent")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model ClinicVisit {
  id           String   @id @default(cuid())
  mother       User     @relation(fields: [motherId], references: [id])
  motherId     String
  facility     Facility @relation(fields: [facilityId], references: [id])
  facilityId   String
  weight       Int
  hiv          String   @default("not specified")
  hbLevel      Float
  rhesusFactor String
  urinalysis   String
  vdrl         String
  bloodRBS     String
  TB           String?
  syphilis     String   @default("not tested")
  hepatitisB   String   @default("not tested")
  notes        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

//TODO ask to create a table to record clinical visits
