// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String             @id @default(cuid())
  f_name                 String
  l_name                 String
  location               LocationsCovered   @relation(fields: [locationsCoveredId], references: [id])
  locationsCoveredId     String
  gender                 String
  email                  String?            @unique
  phone_number           String
  national_id            String?
  pin                    Int
  role                   Roles              @relation(fields: [rolesId], references: [id])
  rolesId                String
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  BioData                BioData[]
  Appointments           Appointments[]
  Incidents              Incidents[]
  Reporter               Incidents[]        @relation("reporter")
  Facility               Facility[]
  FollowUpRequests       FollowUpRequests[]
  FollowUpRequestsMother FollowUpRequests[] @relation("mother")
}

model LocationsCovered {
  id            String   @id @default(cuid())
  location_name String
  User          User[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Roles {
  id        String   @id @default(cuid())
  role_name String
  User      User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BioData {
  id                     String   @id @default(cuid())
  user                   User     @relation(fields: [userId], references: [id])
  userId                 String
  height                 Int
  weight                 Int
  age                    Int
  last_monthly_period    DateTime
  expected_delivery_date DateTime
  pregnancy_period       Int // pregnancy period in weeks
  last_clinic_visit      DateTime
  facility               Facility @relation(fields: [facilityId], references: [id])
  facilityId             String
  previous_pregnancies   Int      @default(0)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model Facility {
  id               String             @id @default(cuid())
  name             String
  BioData          BioData[]
  location         String
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  Appointments     Appointments[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  status           String             @default("Active")
  FollowUpRequests FollowUpRequests[]
}

model Appointments {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  facility    Facility @relation(fields: [facilityId], references: [id])
  facilityId  String
  date        DateTime
  status      String
  purpose     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Incidents {
  id                String   @id @default(cuid())
  reportedBy        User     @relation(fields: [reportedById], references: [id], "reporter")
  reportedById      String
  mother_affected   User     @relation(fields: [motherId], references: [id])
  motherId          String
  description       String
  incident_time     DateTime
  incident_duration String //TODO ask for clarification on incident times
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FollowUpRequests {
  id          String   @id @default(cuid())
  facility    Facility @relation(fields: [facilityId], references: [id])
  facilityId  String
  user        User     @relation(fields: [chvId], references: [id])
  chvId       String // This is the CHV user
  mother      User     @relation(fields: [userId], references: [id], "mother")
  userId      String
  status      String   @default("Pending")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Resources {
  id          String   @id @default(cuid())
  title       String
  description String
  files       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CHVTargets {
  id        String   @id @default(cuid())
  setTarget Int //Number of mothers to register
  current   Int //Mothers currently registered
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//TODO ask to create a table to record clinical visits.
