generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                @id @default(cuid())
  f_name                 String
  l_name                 String
  gender                 String
  email                  String?               @unique
  phone_number           String                @unique
  national_id            String?               @unique
  active                 Boolean               @default(true)
  password               String
  role                   String                @default("Unassigned")
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  facilityAdmin          String?
  facilityId             String?
  createdById            String?
  hasWallet              Boolean               @default(false)
  Appointments           Appointments[]
  BiodatumCreated        BioData[]             @relation("createdBy")
  BioDatumUpdated        BioData[]             @relation("updatedBy")
  BioData                BioData?
  BirthPlan              BirthPlan?
  CHVTargets             CHVTargets?
  ConsentForm            ConsentForm?
  RepliedBy              Enquiries[]           @relation("repliedBy")
  Enquiries              Enquiries[]
  FollowUp               FollowUp[]
  FollowUpRequests       FollowUpRequests[]
  FollowUpRequestsMother FollowUpRequests[]    @relation("mother")
  Incidents              Incidents[]
  Reporter               Incidents[]           @relation("reporter")
  CreatedBy              Schedule[]            @relation("createdBy")
  Schedule               Schedule[]            @relation("mother")
  UpdateBy               Schedule[]            @relation("updatedBy")
  TransactionReversal    TransactionReversal[]
  Facility               Facility?             @relation(fields: [facilityId], references: [id])
  Wallet                 Wallet?
  WalletBase             WalletBase[]
  WalletCodes            WalletCodes[]
  WalletApproval         WalletTransaction[]   @relation("approvedBy")
  Transaction            WalletTransaction[]   @relation("transactionCreatedBy")
  WalletTransaction      WalletTransaction[]
  Admission              Admission[]
  AdmissionOfficer       Admission[]           @relation("AdmissionOfficer")
  Discharge              Discharge[]
  DischargeRequest       DischargeRequest[]
  DischargeProcessed     DischargeRequest[]    @relation("processedBy")
}

model BioData {
  id                     String        @id @default(cuid())
  userId                 String        @unique
  height                 Float?
  weight                 Float?
  active                 Boolean       @default(true)
  age                    Float
  last_monthly_period    DateTime?
  expected_delivery_date DateTime?
  pregnancy_period       Float?
  last_clinic_visit      DateTime
  facilityId             String
  gravidity              Float?        @default(0)
  createdById            String
  updatedById            String
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  parity                 String?
  createdBy              User          @relation("createdBy", fields: [createdById], references: [id])
  facility               Facility      @relation(fields: [facilityId], references: [id])
  updatedBy              User          @relation("updatedBy", fields: [updatedById], references: [id])
  user                   User          @relation(fields: [userId], references: [id])
  ClinicVisit            ClinicVisit[]
}

model Facility {
  id                  String               @id @default(cuid())
  name                String               @unique
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  status              String               @default("Active")
  hasWallet           Boolean              @default(false)
  Appointments        Appointments[]
  BioData             BioData[]
  BirthPlan           BirthPlan[]
  ClinicVisit         ClinicVisit[]
  EmergencyContact    EmergencyContact?
  Enquiries           Enquiries[]
  FacilityWallet      FacilityWallet?
  FollowUpRequests    FollowUpRequests[]
  LocationCoordinates LocationCoordinates?
  Schedule            Schedule[]
  users               User[]
  WalletTransaction   WalletTransaction[]
  Admission           Admission[]
}

model Appointments {
  id          String   @id @default(cuid())
  userId      String
  facilityId  String
  date        DateTime
  status      String
  purpose     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  facility    Facility @relation(fields: [facilityId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Incidents {
  id                String   @id @default(cuid())
  reportedById      String
  motherId          String
  description       String
  incident_time     DateTime
  incident_duration String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  mother_affected   User     @relation(fields: [motherId], references: [id])
  reportedBy        User     @relation("reporter", fields: [reportedById], references: [id])
}

model FollowUpRequests {
  id          String   @id @default(cuid())
  facilityId  String
  chvId       String
  userId      String
  status      String   @default("Pending")
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [chvId], references: [id])
  facility    Facility @relation(fields: [facilityId], references: [id])
  mother      User     @relation("mother", fields: [userId], references: [id])
}

model Resources {
  id          String   @id @default(cuid())
  title       String
  description String
  files       String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CHVTargets {
  id        String   @id @default(cuid())
  setTarget Int      @default(0)
  current   Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  chv       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model LocationCoordinates {
  id         String   @id @default(cuid())
  lat        Float
  lng        Float
  facilityId String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  facility   Facility @relation(fields: [facilityId], references: [id], onDelete: Cascade)
}

model ResetCode {
  id        String   @id @default(cuid())
  email     String?
  code      String   @unique
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Schedule {
  id          String    @id @default(cuid())
  title       String
  description String
  facilityId  String
  date        DateTime
  status      String    @default("Scheduled")
  motherId    String
  createdById String
  updatedById String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  FollowUp    FollowUp?
  createdBy   User      @relation("createdBy", fields: [createdById], references: [id])
  facility    Facility  @relation(fields: [facilityId], references: [id], onDelete: Cascade)
  mother      User      @relation("mother", fields: [motherId], references: [id])
  updatedBy   User      @relation("updatedBy", fields: [updatedById], references: [id])

  @@unique([motherId, date])
}

model FollowUp {
  id         String   @id @default(cuid())
  scheduleId String   @unique
  chvId      String
  status     String   @default("Sent")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
  chv        User     @relation(fields: [chvId], references: [id])
  schedule   Schedule @relation(fields: [scheduleId], references: [id])
}

model ClinicVisit {
  id                   String             @id @default(cuid())
  bioDataId            String
  facilityId           String
  weight               String
  hiv                  String             @default("Not tested")
  hivTestDate          DateTime?
  tetanus              String?            @default("Not injected")
  tetanusInjectionDate DateTime?
  hbLevel              String
  rhesusFactor         String
  bloodGroup           String
  urinalysis           String
  vdrl                 String
  bloodRBS             String
  TB                   String             @default("Not tested")
  hepatitisB           String             @default("Not tested")
  notes                String?
  treatment            String?
  date                 DateTime           @default(now())
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  billed               Boolean            @default(false)
  bioData              BioData            @relation(fields: [bioDataId], references: [id])
  facility             Facility           @relation(fields: [facilityId], references: [id])
  WalletCodes          WalletCodes[]
  WalletTransaction    WalletTransaction?
}

model BirthPlan {
  id                             String   @id @default(cuid())
  motherId                       String   @unique
  facilityId                     String
  delivery_mode                  String
  support_person_name            String?
  support_person_phone           String?
  preferred_transport            String
  preferred_attendant_name       String?
  preferred_attendant_phone      String?
  blood_donor_name               String?
  blood_donor_phone              String?
  emergency_decision_maker_phone String?
  emergency_decision_maker_name  String?
  delivery_bag                   Boolean  @default(false)
  emergency_cs_plan              String?
  savings_plan                   String?
  other_facility                 String?
  createdAt                      DateTime @default(now())
  updatedAr                      DateTime @updatedAt
  facility                       Facility @relation(fields: [facilityId], references: [id])
  mother                         User     @relation(fields: [motherId], references: [id])
}

model ConsentForm {
  id        String   @id @default(cuid())
  userId    String   @unique
  accepted  Boolean  @default(true)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id          String   @id @default(cuid())
  cost        Float?   @default(0)
  messageId   String?
  status      String
  statusCode  Int
  messagePart Int?
  createdAt   DateTime @default(now())
}

model Enquiries {
  id               String    @id @default(cuid())
  senderId         String
  title            String
  description      String
  replyTitle       String?
  replyDescription String?
  facilityId       String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  repliedById      String?
  facility         Facility? @relation(fields: [facilityId], references: [id])
  repliedBy        User?     @relation("repliedBy", fields: [repliedById], references: [id])
  sender           User      @relation(fields: [senderId], references: [id])
}

model Wallet {
  id        String   @id @default(cuid())
  userId    String   @unique
  balance   Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model FacilityWallet {
  id         String   @id @default(cuid())
  facilityId String   @unique
  balance    Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  facility   Facility @relation(fields: [facilityId], references: [id])
}

model WalletTransaction {
  id                  String                @id @default(cuid())
  clinicVisitId       String?               @unique
  discharge           Discharge?            @relation(fields: [dischargeId], references: [id])
  userId              String
  points              Float
  previousPoints      Float                 @default(0)
  balance             Float                 @default(0)
  createdById         String
  approvedById        String?
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  facilityId          String
  rejected            Boolean               @default(false)
  TransactionReversal TransactionReversal[]
  approvedBy          User?                 @relation("approvedBy", fields: [approvedById], references: [id])
  clinicVisit         ClinicVisit?          @relation(fields: [clinicVisitId], references: [id])
  createdBy           User                  @relation("transactionCreatedBy", fields: [createdById], references: [id])
  facility            Facility              @relation(fields: [facilityId], references: [id])
  user                User                  @relation(fields: [userId], references: [id])
  dischargeId         String?
}

model WalletBase {
  id         String   @id @default(cuid())
  userId     String
  points     Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  modifiedBy User     @relation(fields: [userId], references: [id])
}

model WalletCodes {
  id            String      @id @default(cuid())
  userId        String
  clinicVisitId String
  code          String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  visit         ClinicVisit @relation(fields: [clinicVisitId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, code], name: "walletCode")
}

model TransactionReversal {
  id                  String            @id @default(cuid())
  walletTransactionId String
  reason              String
  userId              String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  reversedBy          User              @relation(fields: [userId], references: [id])
  transaction         WalletTransaction @relation(fields: [walletTransactionId], references: [id])
}

model EmergencyContact {
  id         String   @id @default(cuid())
  facilityId String   @unique
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  facility   Facility @relation(fields: [facilityId], references: [id])
}

model Admission {
  id               String             @id @default(cuid())
  user             User               @relation(fields: [userId], references: [id])
  userId           String
  facility         Facility           @relation(fields: [facilityId], references: [id])
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  facilityId       String
  admittedBy       User               @relation("AdmissionOfficer", fields: [admittedById], references: [id])
  admittedById     String
  status           AdmissionStatus    @default(Admitted)
  DischargeRequest DischargeRequest[]
}

enum AdmissionStatus {
  Admitted
  Discharged
  Rejected
  Processing
}

model DischargeRequest {
  id            String                 @id @default(cuid())
  admission     Admission              @relation(fields: [admissionId], references: [id])
  admissionId   String
  files         String[]
  createdAt     DateTime               @default(now())
  updatedAt     DateTime               @updatedAt
  Discharge     Discharge[]
  requestedBy   User                   @relation(fields: [userId], references: [id])
  userId        String
  status        DischargeRequestStatus @default(Pending)
  processedBy   User?                  @relation("processedBy", fields: [processedById], references: [id])
  processedById String?
}

model Discharge {
  id                 String              @id @default(cuid())
  walletAmount       Float
  settleAmount       Float               @default(0)
  request            DischargeRequest    @relation(fields: [dischargeRequestId], references: [id])
  dischargeRequestId String
  approvedBy         User                @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  WalletTransaction  WalletTransaction[]
}

enum DischargeRequestStatus {
  Pending
  Approved
  Rejected
}
